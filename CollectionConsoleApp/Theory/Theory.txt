														Collections	
														=========


		Definations-: store the data of heterogenous element. i.e element having different datatype .


		** Types of Collections
		=======================
	Note : collection divided into 4 different Category

	1> Indexed Based -: Array ,List (have internal index)
	2> Key value pair -: Hashtable , SortedList
	3> Priortized Collections -: Stacks , Queue
	4> Specialized collections -: string collection, hybrid collections


										1> Indexed based

		Example -:
					
					internal index				Country code			Country Name

						1							IND						India
						2							USA						United State
						3							NEP						Nepal



			Note -: in this collections data stored in internal index created if u want to call specific country name then used internal index
			Example : 
				Array[0]=India
				List[0]=India

			- But if u used key-value collection Ex: HashTable then we create own key to search faster
				Example -: 
				// store in key-value pair
				Hashtable.Add("IND","INDIA");
				// Find country name using key
				Hashtable('IND')=India


									3> Priortized Collections -: Stacks , Queue

				Queues -: FIFO (First in First Out) -: First person in the queue is served first
					i.e enque (add) , deque(remove)
				Stack -: LIFO (Last in First Out) -: Last in can be taken first out 
					i.e push (Add) , Pop (remove)



Questions 1-: What is the difference between Array and ArrayList ?
Answer -: 
		1> Array is Fixed size and having strongly datatype 
			
			- no Boxing and Unbosing required.

		Ex :	string[] str1=new string[10]; // size fixed 10 and datatype is string
			
			- For adding data we required lot of code

			Example -
				int[] intArray=new int[]{2};
				intArray[0] = 1;
				intArray[2] = 2;


		2> collection : helps to create Resizable collection 
			
			- Boxing and UnBoxing require bcoz data save in object format thats why collection store all datatype value
			
			- easy to ADD, remove item in collection

			- stored heterogenous element. 

			- For collection namespace is used 
				using system.collection;
		Ex :
			ArrayList arrlist=new ArrayList();
			arrlist.Add("Sagar");
			arrlist.Add(1);
			arrlist.Add(null);





						ArrayList												Array

				1: Easy Syntax											
				2: Accommodate any data types							2: strong typed collection
				3: Variable length										3: Fixed length


		Note -: Array are Faster in ArrayList


Note -: Hashtabel
		
	- hashtable convert key into hashes then data is added to collection s performs of Hashtable is less than both ArrayLista and Array



Questions 1: performancs ArrayList vs HashTable


	1> Lookup : 
			- ArrayList can be only looked up via index number which is generated internally .
			- HashTable can be looked up by a custom key .

	2> ArrayList are faster than hashTable because of extra task perform in hashTable i.e hashing

	3> Scenario -: 
			- if you want to key lookup use hashtable .
			- if you want to just add and browse through collections use ArrayList .


	** Conclusion **
	
	- ArrayList is index based and only can be searched by internal index number generated by the collections .
	-  HashTable provide facility by which we can search the object by using a key.



												Generic Collections 
												===================


Question : What are Generics and what are generic collections ?
Answer -: 
		A] Array
			Advantages:
				- Strongly Type 
				- No Boxing and UnBoxing Required so Searching faster

			DisAdvantages:
				
				- Fixed Size

		B] Collections
			
			Advantages:
				- Resizable collection 
				- easy to use method ADD() ,REMOVE()

			DisAdvantages:
				- Boxing and UnBoxing required beacause all data save in object datatype
				- we cannot perform sorting of heterogenous element.

		C] Generic Collections
			- Take Advantage of both Array and Collection i.e strongly type and Resizable easy to call method Add() Remove()
			- Generic separate the logic from datatypes

			Note : using System.Collection.Generic

					Collections												Generic Collection

				1 ArrayList														List<>

				2 HashTable														Dictionary<>

				3 Stacks and Queue											Stack<> and Queue<>



Questions : What is the use of IEnumerator , ICollection , IDictionary and IList?

Answer -:
	
	A] Interface -:
		- All these things are interface . so all good qualities of interface like decoupling , Runtime Polymorphism can be benefittd .

	B] Encapsulation -:
		- We can control how much collection access should be given to the end Client .
		- don't show add() and Remove() to the client

	C] Polymorphism -:
		- you can dynamically point to different collection on runtime
		- you can dynamically point different collection at Runtime sometime arraylist to hashtable


	1> IEnumerator -: Only browse the collection
	2> ICollection -: Browser Collection + see count
	3> IList or IDictionary -: Browser + count + add + remove elements .
		

Questions : Difference between IEnumerable vs IEnumerator?

	- Both are use to Read the collection of data  using loop.
	1	- IEnumerable actually used IEnumerator it Abstraction over IEnumerator . it makes syntax short and sweet
		i.e IEnumerable internally use IEnumerator
		- ISumerable and IEnumerator both contain GetEnumerator() 
	2 IEnumerable doesnt know which row is executed does not maintain state where IEnumerator does by using Current()


Questions : Difference between IEnumerable vs Iquerable ?

		Example -:

		IEnumerable<Employee> ob=projectDbContextObj.ToList<Employee>();
		IEnumerable<Employee> ob=projectDbContextObj.where(x=>x.EmpId==2).ToList<Employee>();

	IEnumerable-:
			
			- In this example , we load the Employee data where EmpId is 2 filter from all EmpId if u run sql profiler here u can see
		IEnumerable can fetch all data from tblEmp table 
			i.e All data are coming to client then filter is applying on data

	IQueryable -:
			Example 
				
		IQueryable<Employee> ob=projectDbContextObj.ToList<Employee>();
		IQueryable<Employee> ob=projectDbContextObj.where(x=>x.EmpId==2).ToList<Employee>();


		- If u use Sql profiler u see only required datarecords sent to the client and filter occur at sql server level
		i.e it send only EmpId = 2 record


	Use  -:
		- IEnumerable -: In memory collection when we have no database connection used IEnumerable
		- IQuerable -: Collection connected to DB via EF or LINQ use IQuerable beacause it reduce traffic and use power of SQL






























































